{"ast":null,"code":"var _jsxFileName = \"/Users/yinyahui/Desktop/weblearn/juejin/react-antd-manage/react-antd-manage/src/components/BaseFormUI/index.jsx\",\n    _this = this;\n\n/**\n * @description 公共业务组件-基础表单布局\n */\nimport React, { Fragment, useEffect, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport classnames from 'classnames';\nimport { Form, Select, Input, DatePicker, Checkbox, InputNumber, Radio, Space } from 'antd';\n\nconst BaseFormUI = _ref => {\n  let { ...props\n  } = _ref;\n  const {\n    data = {},\n    callback,\n    getFormRef,\n    layout\n  } = props;\n  const formRef = useRef({});\n  /**\n   * 初始化list数据\n   */\n\n  const initListData = function (item) {\n    let messagePrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    // 是否可以操作\n    item.disabled = item.disabled ? item.disabled : false; // 是否必填项\n\n    item.required = item.required === false ? false : true; // 是否必填项\n\n    item.rules = item.rules ? item.rules : [{\n      required: item.required,\n      message: `请${messagePrefix}${item.label}`\n    }];\n    return item;\n  };\n\n  let listInit = _.cloneDeep(props.list);\n\n  listInit.map(item => {\n    let messagePrefix = '选择';\n\n    if (item.key === 'input' || item.key === 'inputNumber' || item.key === 'textArea') {\n      messagePrefix = '输入';\n    }\n\n    item = initListData(item, messagePrefix);\n    item.textArea = item.textArea ? item.textArea : {};\n    item.textArea = initListData(item.textArea, '输入');\n  });\n  let [list, setList] = useState(listInit);\n  let layoutInit = {\n    labelCol: {\n      span: layout.labelCol\n    },\n    wrapperCol: {\n      span: layout.wrapperCol\n    }\n  };\n  useEffect(() => {\n    if (data.initFieldsValueFlag) {\n      formRef.current.setFieldsValue(data);\n    }\n  }, [data]);\n  useEffect(() => {\n    if (formRef) {\n      getFormRef && getFormRef(formRef);\n    }\n  }, []);\n  /**\n   * 输入框类型\n   * @param {object} item 表单项\n   */\n\n  const inputContent = item => {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, item.children ? item.children : /*#__PURE__*/React.createElement(Form.Item, {\n      label: item.label,\n      name: item.key,\n      rules: item.rules,\n      disabled: item.disabled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      placeholder: `请输入${item.label}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }\n    })));\n  };\n  /**\n   * 数字类型输入框类型\n   * @param {object} item 表单项\n   */\n\n\n  const inputNumberContent = item => {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, item.children ? item.children : /*#__PURE__*/React.createElement(Form.Item, {\n      label: item.label,\n      className: classnames({\n        required: item.required\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Form.Item, {\n      noStyle: true,\n      name: item.key,\n      rules: item.rules,\n      disabled: item.disabled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(InputNumber, {\n      style: {\n        width: '50%'\n      },\n      step: item.step,\n      min: item.min,\n      max: item.max,\n      precision: item.precision,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        marginLeft: '10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }\n    }, item.unit)));\n  };\n  /**\n   * 文本域类型\n   * @param {object} item 表单项\n   * @param {string} type 文本域类型 other-其他类型下选择其他时展示\n   */\n\n\n  const textAreaContent = function (item) {\n    let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'other';\n    let areaLayout = {};\n    let label = item.label;\n\n    if (type === 'other') {\n      areaLayout = {\n        wrapperCol: {\n          offset: layout.labelCol,\n          span: layout.wrapperCol\n        }\n      };\n      label = null;\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, item.children ? item.children : /*#__PURE__*/React.createElement(Form.Item, Object.assign({}, areaLayout, {\n      label: label,\n      name: item.key,\n      rules: item.rules,\n      disabled: item.disabled,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Input.TextArea, {\n      maxLength: 500,\n      rows: 3,\n      placeholder: `请输入${item.label}`,\n      allowClear: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }\n    })));\n  };\n  /**\n   * 多选操作\n   * @param {any} checkedValues 选择的数组\n   * @param {number} index 选择的表单项的索引\n   * @return {void} 无\n   */\n\n\n  const checkboxChange = (checkedValues, index) => {\n    let formListInit = _.cloneDeep(list);\n\n    let formItem = formListInit[index];\n    formItem.option = checkedValues;\n    setList(formListInit);\n  };\n  /**\n   * 多选框类型\n   * @param {object} item 表单项\n   * @param {number} index 表单项索引值\n   */\n\n\n  const checkboxContent = (item, index) => {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, item.children ? item.children : /*#__PURE__*/React.createElement(Form.Item, {\n      label: item.label,\n      name: item.key,\n      rules: item.rules,\n      disabled: item.disabled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Checkbox.Group, {\n      onChange: checkedValues => checkboxChange(checkedValues, index),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 13\n      }\n    }, item.list.length !== 0 ? item.list.map(listItem => /*#__PURE__*/React.createElement(Checkbox, {\n      key: listItem.id,\n      value: listItem.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 21\n      }\n    }, listItem.name)) : null)));\n  };\n  /**\n   * 日期类型-可选时间范围\n   * @param {object} item 表单项\n   */\n\n\n  const setDisabledDate = (current, item) => {\n    if (item.dateMinExpression && item.dateMaxExpression) {\n      return current && (current < item.dateMinExpression || current > item.dateMaxExpression);\n    } else if (item.dateMinExpression) {\n      return current && current < item.dateMinExpression;\n    } else if (item.dateMaxExpression) {\n      return current && current > item.dateMaxExpression;\n    }\n  };\n  /**\n   * 日期类型\n   * @param {object} item 表单项\n   */\n\n\n  const dateContent = item => {\n    const format = item.format ? item.format : 'YYYY-MM-DD HH:mm:ss';\n    const showTime = item.showTime === false ? false : true;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, item.children ? item.children : /*#__PURE__*/React.createElement(Form.Item, {\n      label: item.label,\n      name: item.key,\n      rules: item.rules,\n      disabled: item.disabled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(DatePicker, {\n      showTime: showTime,\n      format: format,\n      disabledDate: current => setDisabledDate(current, item),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 13\n      }\n    })));\n  };\n  /**\n   * 下拉选项操作\n   * @param {any} id 选择的id\n   * @param {Object} option 选择的对象\n   * @param {number} index 选择的表单项的索引\n   * @return {void} 无\n   */\n\n\n  const selectChange = (id, option, index) => {\n    let formListInit = _.cloneDeep(list);\n\n    let chooseItem = formListInit[index];\n    if (id === chooseItem.option.value) return false;\n    chooseItem.option = option;\n    setList([...formListInit]);\n  };\n  /**\n   * 下拉类型\n   * @param {object} item 表单项\n   * @param {number} index 表单项索引值\n   */\n\n\n  const selectContent = (item, index) => {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, item.children ? item.children : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Form.Item, {\n      label: item.label,\n      name: item.key,\n      rules: item.rules,\n      disabled: item.disabled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Select, {\n      onChange: (id, option) => selectChange(id, option, index),\n      placeholder: \"\\u8BF7\\u9009\\u62E9\",\n      allowClear: true,\n      optionFilterProp: \"children\",\n      showSearch: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 15\n      }\n    }, item.list.length !== 0 ? item.list.map(listItem => /*#__PURE__*/React.createElement(Select.Option, {\n      key: listItem.id,\n      value: listItem.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 23\n      }\n    }, listItem.name)) : null)), item.textArea.code && item.option.value === item.textArea.code ? textAreaContent(item.textArea) : null));\n  };\n  /**\n   * 单选项操作\n   */\n\n\n  const radioChange = (e, index) => {\n    const value = e.target.value;\n\n    let formListInit = _.cloneDeep(list);\n\n    let chooseItem = formListInit[index];\n    chooseItem.option.value = value;\n    setList(formListInit);\n  };\n  /**\n   * 单选项类型\n   * @param {object} item 表单项\n   * @param {number} index 表单项索引值\n   */\n\n\n  const radioContent = (item, index) => {\n    let textAreaItem = item.textArea ? item.textArea : {};\n    return /*#__PURE__*/React.createElement(React.Fragment, null, item.children ? item.children : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Form.Item, {\n      label: item.label,\n      name: item.key,\n      rules: [{\n        required: item.required,\n        message: `请选择${item.label}`\n      }],\n      disabled: item.disabled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Radio.Group, {\n      onChange: e => radioChange(e, index),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 15\n      }\n    }, item.list.length !== 0 ? item.list.map((listItem, listItemIndex) => /*#__PURE__*/React.createElement(Radio, {\n      key: listItemIndex,\n      value: listItem.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 23\n      }\n    }, listItem.name)) : null)), textAreaItem.code && item.option.value === textAreaItem.code ? textAreaContent(textAreaItem) : null));\n  };\n  /**\n   * 纯文本类型\n   * @param {object} item 表单项\n   * @param {number} index 表单项索引值\n   */\n\n\n  const textContent = item => {\n    return /*#__PURE__*/React.createElement(Form.Item, {\n      label: item.label,\n      name: item.key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Space, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }\n    }, item.children ? item.children : item.value));\n  };\n  /**\n   * 提交操作\n   */\n\n\n  const handleSubmit = value => {\n    callback && callback(value, list);\n  };\n\n  return /*#__PURE__*/React.createElement(Form, Object.assign({}, layoutInit, {\n    labelAlign: \"left\",\n    ref: formRef,\n    onFinish: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 5\n    }\n  }), list.map((formItem, formIndex) => {\n    return /*#__PURE__*/React.createElement(Fragment, {\n      key: formIndex,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 11\n      }\n    }, formItem.fieldtype === 'input' && inputContent(formItem), formItem.fieldtype === 'inputNumber' && inputNumberContent(formItem), formItem.fieldtype === 'date' && dateContent(formItem), formItem.fieldtype === 'select' && selectContent(formItem, formIndex), formItem.fieldtype === 'checkbox' && checkboxContent(formItem, formIndex), formItem.fieldtype === 'radio' && radioContent(formItem, formIndex), formItem.fieldtype === 'textArea' && textAreaContent(formItem, ''), formItem.fieldtype === 'text' && textContent(formItem));\n  }));\n};\n\nBaseFormUI.propTypes = {\n  callback: PropTypes.func,\n  // 回调函数\n  data: PropTypes.object.isRequired,\n  // 基础数据对象 必传\n  layout: PropTypes.object,\n  // 表单布局\n  list: PropTypes.array,\n  // 表单项数组\n  getFormRef: PropTypes.func // 获取formRef方法\n\n};\nBaseFormUI.defaultProps = {\n  data: {},\n  list: [],\n  layout: {\n    labelCol: 6,\n    wrapperCol: 18\n  }\n};\nexport default BaseFormUI;","map":{"version":3,"names":["React","Fragment","useEffect","useState","useRef","PropTypes","_","classnames","Form","Select","Input","DatePicker","Checkbox","InputNumber","Radio","Space","BaseFormUI","props","data","callback","getFormRef","layout","formRef","initListData","item","messagePrefix","disabled","required","rules","message","label","listInit","cloneDeep","list","map","key","textArea","setList","layoutInit","labelCol","span","wrapperCol","initFieldsValueFlag","current","setFieldsValue","inputContent","children","inputNumberContent","width","step","min","max","precision","marginLeft","unit","textAreaContent","type","areaLayout","offset","checkboxChange","checkedValues","index","formListInit","formItem","option","checkboxContent","length","listItem","id","name","setDisabledDate","dateMinExpression","dateMaxExpression","dateContent","format","showTime","selectChange","chooseItem","value","selectContent","code","radioChange","e","target","radioContent","textAreaItem","listItemIndex","textContent","handleSubmit","formIndex","fieldtype","propTypes","func","object","isRequired","array","defaultProps"],"sources":["/Users/yinyahui/Desktop/weblearn/juejin/react-antd-manage/react-antd-manage/src/components/BaseFormUI/index.jsx"],"sourcesContent":["/**\n * @description 公共业务组件-基础表单布局\n */\nimport React, { Fragment, useEffect, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport classnames from 'classnames';\nimport { Form, Select, Input, DatePicker, Checkbox, InputNumber, Radio, Space } from 'antd';\n\nconst BaseFormUI = ({ ...props }) => {\n  const { data = {}, callback, getFormRef, layout } = props;\n  const formRef = useRef({});\n  /**\n   * 初始化list数据\n   */\n  const initListData = (item, messagePrefix = '') => {\n    // 是否可以操作\n    item.disabled = item.disabled ? item.disabled : false;\n    // 是否必填项\n    item.required = item.required === false ? false : true;\n    // 是否必填项\n    item.rules = item.rules ? item.rules : [{ required: item.required, message: `请${messagePrefix}${item.label}` }];\n    return item;\n  };\n\n  let listInit = _.cloneDeep(props.list);\n  listInit.map(item => {\n    let messagePrefix = '选择';\n    if (item.key === 'input' || item.key === 'inputNumber' || item.key === 'textArea') {\n      messagePrefix = '输入';\n    }\n    item = initListData(item, messagePrefix);\n    item.textArea = item.textArea ? item.textArea : {};\n    item.textArea = initListData(item.textArea, '输入');\n  });\n  let [list, setList] = useState(listInit);\n  let layoutInit = {\n    labelCol: { span: layout.labelCol },\n    wrapperCol: { span: layout.wrapperCol },\n  };\n\n  useEffect(() => {\n    if (data.initFieldsValueFlag) {\n      formRef.current.setFieldsValue(data);\n    }\n  }, [data]);\n\n  useEffect(() => {\n    if (formRef) {\n      getFormRef && getFormRef(formRef);\n    }\n  }, []);\n\n  /**\n   * 输入框类型\n   * @param {object} item 表单项\n   */\n  const inputContent = item => {\n    return (\n      <>\n        {item.children ? (\n          item.children\n        ) : (\n          <Form.Item label={item.label} name={item.key} rules={item.rules} disabled={item.disabled}>\n            <Input placeholder={`请输入${item.label}`} />\n          </Form.Item>\n        )}\n      </>\n    );\n  };\n\n  /**\n   * 数字类型输入框类型\n   * @param {object} item 表单项\n   */\n  const inputNumberContent = item => {\n    return (\n      <>\n        {item.children ? (\n          item.children\n        ) : (\n          <Form.Item label={item.label} className={classnames({ required: item.required })}>\n            <Form.Item noStyle name={item.key} rules={item.rules} disabled={item.disabled}>\n              <InputNumber style={{ width: '50%' }} step={item.step} min={item.min} max={item.max} precision={item.precision} />\n            </Form.Item>\n            <span style={{ marginLeft: '10px' }}>{item.unit}</span>\n          </Form.Item>\n        )}\n      </>\n    );\n  };\n\n  /**\n   * 文本域类型\n   * @param {object} item 表单项\n   * @param {string} type 文本域类型 other-其他类型下选择其他时展示\n   */\n  const textAreaContent = (item, type = 'other') => {\n    let areaLayout = {};\n    let label = item.label;\n    if (type === 'other') {\n      areaLayout = { wrapperCol: { offset: layout.labelCol, span: layout.wrapperCol } };\n      label = null;\n    }\n    return (\n      <>\n        {item.children ? (\n          item.children\n        ) : (\n          <Form.Item {...areaLayout} label={label} name={item.key} rules={item.rules} disabled={item.disabled}>\n            <Input.TextArea maxLength={500} rows={3} placeholder={`请输入${item.label}`} allowClear />\n          </Form.Item>\n        )}\n      </>\n    );\n  };\n\n  /**\n   * 多选操作\n   * @param {any} checkedValues 选择的数组\n   * @param {number} index 选择的表单项的索引\n   * @return {void} 无\n   */\n  const checkboxChange = (checkedValues, index) => {\n    let formListInit = _.cloneDeep(list);\n    let formItem = formListInit[index];\n    formItem.option = checkedValues;\n    setList(formListInit);\n  };\n\n  /**\n   * 多选框类型\n   * @param {object} item 表单项\n   * @param {number} index 表单项索引值\n   */\n  const checkboxContent = (item, index) => {\n    return (\n      <>\n        {item.children ? (\n          item.children\n        ) : (\n          <Form.Item label={item.label} name={item.key} rules={item.rules} disabled={item.disabled}>\n            <Checkbox.Group onChange={checkedValues => checkboxChange(checkedValues, index)}>\n              {item.list.length !== 0\n                ? item.list.map(listItem => (\n                    <Checkbox key={listItem.id} value={listItem.id}>\n                      {listItem.name}\n                    </Checkbox>\n                  ))\n                : null}\n            </Checkbox.Group>\n          </Form.Item>\n        )}\n      </>\n    );\n  };\n\n  /**\n   * 日期类型-可选时间范围\n   * @param {object} item 表单项\n   */\n  const setDisabledDate = (current, item) => {\n    if (item.dateMinExpression && item.dateMaxExpression) {\n      return current && (current < item.dateMinExpression || current > item.dateMaxExpression);\n    } else if (item.dateMinExpression) {\n      return current && current < item.dateMinExpression;\n    } else if (item.dateMaxExpression) {\n      return current && current > item.dateMaxExpression;\n    }\n  };\n\n  /**\n   * 日期类型\n   * @param {object} item 表单项\n   */\n  const dateContent = item => {\n    const format = item.format ? item.format : 'YYYY-MM-DD HH:mm:ss';\n    const showTime = item.showTime === false ? false : true;\n\n    return (\n      <>\n        {item.children ? (\n          item.children\n        ) : (\n          <Form.Item label={item.label} name={item.key} rules={item.rules} disabled={item.disabled}>\n            <DatePicker showTime={showTime} format={format} disabledDate={current => setDisabledDate(current, item)} />\n          </Form.Item>\n        )}\n      </>\n    );\n  };\n\n  /**\n   * 下拉选项操作\n   * @param {any} id 选择的id\n   * @param {Object} option 选择的对象\n   * @param {number} index 选择的表单项的索引\n   * @return {void} 无\n   */\n  const selectChange = (id, option, index) => {\n    let formListInit = _.cloneDeep(list);\n    let chooseItem = formListInit[index];\n    if (id === chooseItem.option.value) return false;\n    chooseItem.option = option;\n    setList([...formListInit]);\n  };\n\n  /**\n   * 下拉类型\n   * @param {object} item 表单项\n   * @param {number} index 表单项索引值\n   */\n  const selectContent = (item, index) => {\n    return (\n      <>\n        {item.children ? (\n          item.children\n        ) : (\n          <>\n            <Form.Item label={item.label} name={item.key} rules={item.rules} disabled={item.disabled}>\n              <Select onChange={(id, option) => selectChange(id, option, index)} placeholder='请选择' allowClear optionFilterProp='children' showSearch>\n                {item.list.length !== 0\n                  ? item.list.map(listItem => (\n                      <Select.Option key={listItem.id} value={listItem.id}>\n                        {listItem.name}\n                      </Select.Option>\n                    ))\n                  : null}\n              </Select>\n            </Form.Item>\n            {/* 下拉项中有需要文本输入的情况 */}\n            {item.textArea.code && item.option.value === item.textArea.code ? textAreaContent(item.textArea) : null}\n          </>\n        )}\n      </>\n    );\n  };\n\n  /**\n   * 单选项操作\n   */\n  const radioChange = (e, index) => {\n    const value = e.target.value;\n    let formListInit = _.cloneDeep(list);\n    let chooseItem = formListInit[index];\n    chooseItem.option.value = value;\n    setList(formListInit);\n  };\n\n  /**\n   * 单选项类型\n   * @param {object} item 表单项\n   * @param {number} index 表单项索引值\n   */\n  const radioContent = (item, index) => {\n    let textAreaItem = item.textArea ? item.textArea : {};\n    return (\n      <>\n        {item.children ? (\n          item.children\n        ) : (\n          <>\n            <Form.Item label={item.label} name={item.key} rules={[{ required: item.required, message: `请选择${item.label}` }]} disabled={item.disabled}>\n              <Radio.Group onChange={e => radioChange(e, index)}>\n                {item.list.length !== 0\n                  ? item.list.map((listItem, listItemIndex) => (\n                      <Radio key={listItemIndex} value={listItem.id}>\n                        {listItem.name}\n                      </Radio>\n                    ))\n                  : null}\n              </Radio.Group>\n            </Form.Item>\n            {/* 下拉项中有需要文本输入的情况 */}\n            {textAreaItem.code && item.option.value === textAreaItem.code ? textAreaContent(textAreaItem) : null}\n          </>\n        )}\n      </>\n    );\n  };\n\n  /**\n   * 纯文本类型\n   * @param {object} item 表单项\n   * @param {number} index 表单项索引值\n   */\n  const textContent = item => {\n    return (\n      <Form.Item label={item.label} name={item.key}>\n        <Space>{item.children ? item.children : item.value}</Space>\n      </Form.Item>\n    );\n  };\n\n  /**\n   * 提交操作\n   */\n  const handleSubmit = value => {\n    callback && callback(value, list);\n  };\n\n  return (\n    <Form {...layoutInit} labelAlign='left' ref={formRef} onFinish={handleSubmit}>\n      {list.map((formItem, formIndex) => {\n        return (\n          <Fragment key={formIndex}>\n            {formItem.fieldtype === 'input' && inputContent(formItem)}\n            {formItem.fieldtype === 'inputNumber' && inputNumberContent(formItem)}\n            {formItem.fieldtype === 'date' && dateContent(formItem)}\n            {formItem.fieldtype === 'select' && selectContent(formItem, formIndex)}\n            {formItem.fieldtype === 'checkbox' && checkboxContent(formItem, formIndex)}\n            {formItem.fieldtype === 'radio' && radioContent(formItem, formIndex)}\n            {formItem.fieldtype === 'textArea' && textAreaContent(formItem, '')}\n            {formItem.fieldtype === 'text' && textContent(formItem)}\n          </Fragment>\n        );\n      })}\n    </Form>\n  );\n};\n\nBaseFormUI.propTypes = {\n  callback: PropTypes.func, // 回调函数\n  data: PropTypes.object.isRequired, // 基础数据对象 必传\n  layout: PropTypes.object, // 表单布局\n  list: PropTypes.array, // 表单项数组\n  getFormRef: PropTypes.func, // 获取formRef方法\n};\n\nBaseFormUI.defaultProps = {\n  data: {},\n  list: [],\n  layout: {\n    labelCol: 6,\n    wrapperCol: 18,\n  },\n};\n\nexport default BaseFormUI;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}